// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: campaign/events.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/cosmos-sdk/types"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type EventCampaignCreated struct {
	CampaignID         uint64 `protobuf:"varint,1,opt,name=campaignID,proto3" json:"campaignID,omitempty"`
	CoordinatorAddress string `protobuf:"bytes,2,opt,name=coordinatorAddress,proto3" json:"coordinatorAddress,omitempty"`
	CoordinatorID      uint64 `protobuf:"varint,3,opt,name=coordinatorID,proto3" json:"coordinatorID,omitempty"`
}

func (m *EventCampaignCreated) Reset()         { *m = EventCampaignCreated{} }
func (m *EventCampaignCreated) String() string { return proto.CompactTextString(m) }
func (*EventCampaignCreated) ProtoMessage()    {}
func (*EventCampaignCreated) Descriptor() ([]byte, []int) {
	return fileDescriptor_d53837db7ef8e0f4, []int{0}
}
func (m *EventCampaignCreated) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventCampaignCreated) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventCampaignCreated.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventCampaignCreated) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventCampaignCreated.Merge(m, src)
}
func (m *EventCampaignCreated) XXX_Size() int {
	return m.Size()
}
func (m *EventCampaignCreated) XXX_DiscardUnknown() {
	xxx_messageInfo_EventCampaignCreated.DiscardUnknown(m)
}

var xxx_messageInfo_EventCampaignCreated proto.InternalMessageInfo

func (m *EventCampaignCreated) GetCampaignID() uint64 {
	if m != nil {
		return m.CampaignID
	}
	return 0
}

func (m *EventCampaignCreated) GetCoordinatorAddress() string {
	if m != nil {
		return m.CoordinatorAddress
	}
	return ""
}

func (m *EventCampaignCreated) GetCoordinatorID() uint64 {
	if m != nil {
		return m.CoordinatorID
	}
	return 0
}

type EventCampaignChainAdded struct {
	CampaignID uint64 `protobuf:"varint,1,opt,name=campaignID,proto3" json:"campaignID,omitempty"`
	LaunchID   uint64 `protobuf:"varint,2,opt,name=launchID,proto3" json:"launchID,omitempty"`
}

func (m *EventCampaignChainAdded) Reset()         { *m = EventCampaignChainAdded{} }
func (m *EventCampaignChainAdded) String() string { return proto.CompactTextString(m) }
func (*EventCampaignChainAdded) ProtoMessage()    {}
func (*EventCampaignChainAdded) Descriptor() ([]byte, []int) {
	return fileDescriptor_d53837db7ef8e0f4, []int{1}
}
func (m *EventCampaignChainAdded) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventCampaignChainAdded) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventCampaignChainAdded.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventCampaignChainAdded) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventCampaignChainAdded.Merge(m, src)
}
func (m *EventCampaignChainAdded) XXX_Size() int {
	return m.Size()
}
func (m *EventCampaignChainAdded) XXX_DiscardUnknown() {
	xxx_messageInfo_EventCampaignChainAdded.DiscardUnknown(m)
}

var xxx_messageInfo_EventCampaignChainAdded proto.InternalMessageInfo

func (m *EventCampaignChainAdded) GetCampaignID() uint64 {
	if m != nil {
		return m.CampaignID
	}
	return 0
}

func (m *EventCampaignChainAdded) GetLaunchID() uint64 {
	if m != nil {
		return m.LaunchID
	}
	return 0
}

type EventCampaignInfoUpdated struct {
	CampaignID         uint64 `protobuf:"varint,1,opt,name=campaignID,proto3" json:"campaignID,omitempty"`
	CoordinatorAddress string `protobuf:"bytes,2,opt,name=coordinatorAddress,proto3" json:"coordinatorAddress,omitempty"`
	CampaignName       string `protobuf:"bytes,3,opt,name=campaignName,proto3" json:"campaignName,omitempty"`
	Metadata           []byte `protobuf:"bytes,4,opt,name=metadata,proto3" json:"metadata,omitempty"`
}

func (m *EventCampaignInfoUpdated) Reset()         { *m = EventCampaignInfoUpdated{} }
func (m *EventCampaignInfoUpdated) String() string { return proto.CompactTextString(m) }
func (*EventCampaignInfoUpdated) ProtoMessage()    {}
func (*EventCampaignInfoUpdated) Descriptor() ([]byte, []int) {
	return fileDescriptor_d53837db7ef8e0f4, []int{2}
}
func (m *EventCampaignInfoUpdated) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventCampaignInfoUpdated) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventCampaignInfoUpdated.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventCampaignInfoUpdated) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventCampaignInfoUpdated.Merge(m, src)
}
func (m *EventCampaignInfoUpdated) XXX_Size() int {
	return m.Size()
}
func (m *EventCampaignInfoUpdated) XXX_DiscardUnknown() {
	xxx_messageInfo_EventCampaignInfoUpdated.DiscardUnknown(m)
}

var xxx_messageInfo_EventCampaignInfoUpdated proto.InternalMessageInfo

func (m *EventCampaignInfoUpdated) GetCampaignID() uint64 {
	if m != nil {
		return m.CampaignID
	}
	return 0
}

func (m *EventCampaignInfoUpdated) GetCoordinatorAddress() string {
	if m != nil {
		return m.CoordinatorAddress
	}
	return ""
}

func (m *EventCampaignInfoUpdated) GetCampaignName() string {
	if m != nil {
		return m.CampaignName
	}
	return ""
}

func (m *EventCampaignInfoUpdated) GetMetadata() []byte {
	if m != nil {
		return m.Metadata
	}
	return nil
}

type EventCampaignSharesUpdated struct {
	CampaignID         uint64 `protobuf:"varint,1,opt,name=campaignID,proto3" json:"campaignID,omitempty"`
	CoordinatorAddress string `protobuf:"bytes,2,opt,name=coordinatorAddress,proto3" json:"coordinatorAddress,omitempty"`
	AllocatedShares    Shares `protobuf:"bytes,3,rep,name=allocatedShares,proto3,casttype=github.com/cosmos/cosmos-sdk/types.Coin,castrepeated=Shares" json:"allocatedShares"`
}

func (m *EventCampaignSharesUpdated) Reset()         { *m = EventCampaignSharesUpdated{} }
func (m *EventCampaignSharesUpdated) String() string { return proto.CompactTextString(m) }
func (*EventCampaignSharesUpdated) ProtoMessage()    {}
func (*EventCampaignSharesUpdated) Descriptor() ([]byte, []int) {
	return fileDescriptor_d53837db7ef8e0f4, []int{3}
}
func (m *EventCampaignSharesUpdated) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventCampaignSharesUpdated) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventCampaignSharesUpdated.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventCampaignSharesUpdated) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventCampaignSharesUpdated.Merge(m, src)
}
func (m *EventCampaignSharesUpdated) XXX_Size() int {
	return m.Size()
}
func (m *EventCampaignSharesUpdated) XXX_DiscardUnknown() {
	xxx_messageInfo_EventCampaignSharesUpdated.DiscardUnknown(m)
}

var xxx_messageInfo_EventCampaignSharesUpdated proto.InternalMessageInfo

func (m *EventCampaignSharesUpdated) GetCampaignID() uint64 {
	if m != nil {
		return m.CampaignID
	}
	return 0
}

func (m *EventCampaignSharesUpdated) GetCoordinatorAddress() string {
	if m != nil {
		return m.CoordinatorAddress
	}
	return ""
}

func (m *EventCampaignSharesUpdated) GetAllocatedShares() Shares {
	if m != nil {
		return m.AllocatedShares
	}
	return nil
}

type EventCampaignTotalSupplyUpdated struct {
	CampaignID         uint64                                   `protobuf:"varint,1,opt,name=campaignID,proto3" json:"campaignID,omitempty"`
	CoordinatorAddress string                                   `protobuf:"bytes,2,opt,name=coordinatorAddress,proto3" json:"coordinatorAddress,omitempty"`
	TotalSupply        github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,3,rep,name=totalSupply,proto3,casttype=github.com/cosmos/cosmos-sdk/types.Coin,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"totalSupply"`
}

func (m *EventCampaignTotalSupplyUpdated) Reset()         { *m = EventCampaignTotalSupplyUpdated{} }
func (m *EventCampaignTotalSupplyUpdated) String() string { return proto.CompactTextString(m) }
func (*EventCampaignTotalSupplyUpdated) ProtoMessage()    {}
func (*EventCampaignTotalSupplyUpdated) Descriptor() ([]byte, []int) {
	return fileDescriptor_d53837db7ef8e0f4, []int{4}
}
func (m *EventCampaignTotalSupplyUpdated) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventCampaignTotalSupplyUpdated) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventCampaignTotalSupplyUpdated.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventCampaignTotalSupplyUpdated) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventCampaignTotalSupplyUpdated.Merge(m, src)
}
func (m *EventCampaignTotalSupplyUpdated) XXX_Size() int {
	return m.Size()
}
func (m *EventCampaignTotalSupplyUpdated) XXX_DiscardUnknown() {
	xxx_messageInfo_EventCampaignTotalSupplyUpdated.DiscardUnknown(m)
}

var xxx_messageInfo_EventCampaignTotalSupplyUpdated proto.InternalMessageInfo

func (m *EventCampaignTotalSupplyUpdated) GetCampaignID() uint64 {
	if m != nil {
		return m.CampaignID
	}
	return 0
}

func (m *EventCampaignTotalSupplyUpdated) GetCoordinatorAddress() string {
	if m != nil {
		return m.CoordinatorAddress
	}
	return ""
}

func (m *EventCampaignTotalSupplyUpdated) GetTotalSupply() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.TotalSupply
	}
	return nil
}

type EventCampaignMainnetInitialized struct {
	CampaignID         uint64 `protobuf:"varint,1,opt,name=campaignID,proto3" json:"campaignID,omitempty"`
	CoordinatorAddress string `protobuf:"bytes,2,opt,name=coordinatorAddress,proto3" json:"coordinatorAddress,omitempty"`
	MainnetID          uint64 `protobuf:"varint,3,opt,name=mainnetID,proto3" json:"mainnetID,omitempty"`
}

func (m *EventCampaignMainnetInitialized) Reset()         { *m = EventCampaignMainnetInitialized{} }
func (m *EventCampaignMainnetInitialized) String() string { return proto.CompactTextString(m) }
func (*EventCampaignMainnetInitialized) ProtoMessage()    {}
func (*EventCampaignMainnetInitialized) Descriptor() ([]byte, []int) {
	return fileDescriptor_d53837db7ef8e0f4, []int{5}
}
func (m *EventCampaignMainnetInitialized) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventCampaignMainnetInitialized) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventCampaignMainnetInitialized.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventCampaignMainnetInitialized) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventCampaignMainnetInitialized.Merge(m, src)
}
func (m *EventCampaignMainnetInitialized) XXX_Size() int {
	return m.Size()
}
func (m *EventCampaignMainnetInitialized) XXX_DiscardUnknown() {
	xxx_messageInfo_EventCampaignMainnetInitialized.DiscardUnknown(m)
}

var xxx_messageInfo_EventCampaignMainnetInitialized proto.InternalMessageInfo

func (m *EventCampaignMainnetInitialized) GetCampaignID() uint64 {
	if m != nil {
		return m.CampaignID
	}
	return 0
}

func (m *EventCampaignMainnetInitialized) GetCoordinatorAddress() string {
	if m != nil {
		return m.CoordinatorAddress
	}
	return ""
}

func (m *EventCampaignMainnetInitialized) GetMainnetID() uint64 {
	if m != nil {
		return m.MainnetID
	}
	return 0
}

type EventMainnetAccountCreated struct {
	CampaignID uint64 `protobuf:"varint,1,opt,name=campaignID,proto3" json:"campaignID,omitempty"`
	Address    string `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	Shares     Shares `protobuf:"bytes,3,rep,name=shares,proto3,casttype=github.com/cosmos/cosmos-sdk/types.Coin,castrepeated=Shares" json:"shares"`
}

func (m *EventMainnetAccountCreated) Reset()         { *m = EventMainnetAccountCreated{} }
func (m *EventMainnetAccountCreated) String() string { return proto.CompactTextString(m) }
func (*EventMainnetAccountCreated) ProtoMessage()    {}
func (*EventMainnetAccountCreated) Descriptor() ([]byte, []int) {
	return fileDescriptor_d53837db7ef8e0f4, []int{6}
}
func (m *EventMainnetAccountCreated) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventMainnetAccountCreated) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventMainnetAccountCreated.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventMainnetAccountCreated) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventMainnetAccountCreated.Merge(m, src)
}
func (m *EventMainnetAccountCreated) XXX_Size() int {
	return m.Size()
}
func (m *EventMainnetAccountCreated) XXX_DiscardUnknown() {
	xxx_messageInfo_EventMainnetAccountCreated.DiscardUnknown(m)
}

var xxx_messageInfo_EventMainnetAccountCreated proto.InternalMessageInfo

func (m *EventMainnetAccountCreated) GetCampaignID() uint64 {
	if m != nil {
		return m.CampaignID
	}
	return 0
}

func (m *EventMainnetAccountCreated) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *EventMainnetAccountCreated) GetShares() Shares {
	if m != nil {
		return m.Shares
	}
	return nil
}

type EventMainnetAccountUpdated struct {
	CampaignID uint64 `protobuf:"varint,1,opt,name=campaignID,proto3" json:"campaignID,omitempty"`
	Address    string `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	Shares     Shares `protobuf:"bytes,3,rep,name=shares,proto3,casttype=github.com/cosmos/cosmos-sdk/types.Coin,castrepeated=Shares" json:"shares"`
}

func (m *EventMainnetAccountUpdated) Reset()         { *m = EventMainnetAccountUpdated{} }
func (m *EventMainnetAccountUpdated) String() string { return proto.CompactTextString(m) }
func (*EventMainnetAccountUpdated) ProtoMessage()    {}
func (*EventMainnetAccountUpdated) Descriptor() ([]byte, []int) {
	return fileDescriptor_d53837db7ef8e0f4, []int{7}
}
func (m *EventMainnetAccountUpdated) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventMainnetAccountUpdated) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventMainnetAccountUpdated.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventMainnetAccountUpdated) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventMainnetAccountUpdated.Merge(m, src)
}
func (m *EventMainnetAccountUpdated) XXX_Size() int {
	return m.Size()
}
func (m *EventMainnetAccountUpdated) XXX_DiscardUnknown() {
	xxx_messageInfo_EventMainnetAccountUpdated.DiscardUnknown(m)
}

var xxx_messageInfo_EventMainnetAccountUpdated proto.InternalMessageInfo

func (m *EventMainnetAccountUpdated) GetCampaignID() uint64 {
	if m != nil {
		return m.CampaignID
	}
	return 0
}

func (m *EventMainnetAccountUpdated) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *EventMainnetAccountUpdated) GetShares() Shares {
	if m != nil {
		return m.Shares
	}
	return nil
}

type EventMainnetAccountRemoved struct {
	CampaignID uint64 `protobuf:"varint,1,opt,name=campaignID,proto3" json:"campaignID,omitempty"`
	Address    string `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *EventMainnetAccountRemoved) Reset()         { *m = EventMainnetAccountRemoved{} }
func (m *EventMainnetAccountRemoved) String() string { return proto.CompactTextString(m) }
func (*EventMainnetAccountRemoved) ProtoMessage()    {}
func (*EventMainnetAccountRemoved) Descriptor() ([]byte, []int) {
	return fileDescriptor_d53837db7ef8e0f4, []int{8}
}
func (m *EventMainnetAccountRemoved) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventMainnetAccountRemoved) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventMainnetAccountRemoved.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventMainnetAccountRemoved) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventMainnetAccountRemoved.Merge(m, src)
}
func (m *EventMainnetAccountRemoved) XXX_Size() int {
	return m.Size()
}
func (m *EventMainnetAccountRemoved) XXX_DiscardUnknown() {
	xxx_messageInfo_EventMainnetAccountRemoved.DiscardUnknown(m)
}

var xxx_messageInfo_EventMainnetAccountRemoved proto.InternalMessageInfo

func (m *EventMainnetAccountRemoved) GetCampaignID() uint64 {
	if m != nil {
		return m.CampaignID
	}
	return 0
}

func (m *EventMainnetAccountRemoved) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

type EventMainnetVestingAccountCreated struct {
	CampaignID     uint64              `protobuf:"varint,1,opt,name=campaignID,proto3" json:"campaignID,omitempty"`
	Address        string              `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	VestingOptions ShareVestingOptions `protobuf:"bytes,3,opt,name=vestingOptions,proto3" json:"vestingOptions"`
}

func (m *EventMainnetVestingAccountCreated) Reset()         { *m = EventMainnetVestingAccountCreated{} }
func (m *EventMainnetVestingAccountCreated) String() string { return proto.CompactTextString(m) }
func (*EventMainnetVestingAccountCreated) ProtoMessage()    {}
func (*EventMainnetVestingAccountCreated) Descriptor() ([]byte, []int) {
	return fileDescriptor_d53837db7ef8e0f4, []int{9}
}
func (m *EventMainnetVestingAccountCreated) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventMainnetVestingAccountCreated) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventMainnetVestingAccountCreated.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventMainnetVestingAccountCreated) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventMainnetVestingAccountCreated.Merge(m, src)
}
func (m *EventMainnetVestingAccountCreated) XXX_Size() int {
	return m.Size()
}
func (m *EventMainnetVestingAccountCreated) XXX_DiscardUnknown() {
	xxx_messageInfo_EventMainnetVestingAccountCreated.DiscardUnknown(m)
}

var xxx_messageInfo_EventMainnetVestingAccountCreated proto.InternalMessageInfo

func (m *EventMainnetVestingAccountCreated) GetCampaignID() uint64 {
	if m != nil {
		return m.CampaignID
	}
	return 0
}

func (m *EventMainnetVestingAccountCreated) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *EventMainnetVestingAccountCreated) GetVestingOptions() ShareVestingOptions {
	if m != nil {
		return m.VestingOptions
	}
	return ShareVestingOptions{}
}

type EventMainnetVestingAccountUpdated struct {
	CampaignID     uint64              `protobuf:"varint,1,opt,name=campaignID,proto3" json:"campaignID,omitempty"`
	Address        string              `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	VestingOptions ShareVestingOptions `protobuf:"bytes,3,opt,name=vestingOptions,proto3" json:"vestingOptions"`
}

func (m *EventMainnetVestingAccountUpdated) Reset()         { *m = EventMainnetVestingAccountUpdated{} }
func (m *EventMainnetVestingAccountUpdated) String() string { return proto.CompactTextString(m) }
func (*EventMainnetVestingAccountUpdated) ProtoMessage()    {}
func (*EventMainnetVestingAccountUpdated) Descriptor() ([]byte, []int) {
	return fileDescriptor_d53837db7ef8e0f4, []int{10}
}
func (m *EventMainnetVestingAccountUpdated) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventMainnetVestingAccountUpdated) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventMainnetVestingAccountUpdated.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventMainnetVestingAccountUpdated) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventMainnetVestingAccountUpdated.Merge(m, src)
}
func (m *EventMainnetVestingAccountUpdated) XXX_Size() int {
	return m.Size()
}
func (m *EventMainnetVestingAccountUpdated) XXX_DiscardUnknown() {
	xxx_messageInfo_EventMainnetVestingAccountUpdated.DiscardUnknown(m)
}

var xxx_messageInfo_EventMainnetVestingAccountUpdated proto.InternalMessageInfo

func (m *EventMainnetVestingAccountUpdated) GetCampaignID() uint64 {
	if m != nil {
		return m.CampaignID
	}
	return 0
}

func (m *EventMainnetVestingAccountUpdated) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *EventMainnetVestingAccountUpdated) GetVestingOptions() ShareVestingOptions {
	if m != nil {
		return m.VestingOptions
	}
	return ShareVestingOptions{}
}

type EventCampaignAuctionCreated struct {
	CampaignID uint64 `protobuf:"varint,1,opt,name=campaignID,proto3" json:"campaignID,omitempty"`
	AuctionID  uint64 `protobuf:"varint,2,opt,name=auctionID,proto3" json:"auctionID,omitempty"`
}

func (m *EventCampaignAuctionCreated) Reset()         { *m = EventCampaignAuctionCreated{} }
func (m *EventCampaignAuctionCreated) String() string { return proto.CompactTextString(m) }
func (*EventCampaignAuctionCreated) ProtoMessage()    {}
func (*EventCampaignAuctionCreated) Descriptor() ([]byte, []int) {
	return fileDescriptor_d53837db7ef8e0f4, []int{11}
}
func (m *EventCampaignAuctionCreated) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventCampaignAuctionCreated) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventCampaignAuctionCreated.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventCampaignAuctionCreated) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventCampaignAuctionCreated.Merge(m, src)
}
func (m *EventCampaignAuctionCreated) XXX_Size() int {
	return m.Size()
}
func (m *EventCampaignAuctionCreated) XXX_DiscardUnknown() {
	xxx_messageInfo_EventCampaignAuctionCreated.DiscardUnknown(m)
}

var xxx_messageInfo_EventCampaignAuctionCreated proto.InternalMessageInfo

func (m *EventCampaignAuctionCreated) GetCampaignID() uint64 {
	if m != nil {
		return m.CampaignID
	}
	return 0
}

func (m *EventCampaignAuctionCreated) GetAuctionID() uint64 {
	if m != nil {
		return m.AuctionID
	}
	return 0
}

func init() {
	proto.RegisterType((*EventCampaignCreated)(nil), "tendermint.spn.campaign.EventCampaignCreated")
	proto.RegisterType((*EventCampaignChainAdded)(nil), "tendermint.spn.campaign.EventCampaignChainAdded")
	proto.RegisterType((*EventCampaignInfoUpdated)(nil), "tendermint.spn.campaign.EventCampaignInfoUpdated")
	proto.RegisterType((*EventCampaignSharesUpdated)(nil), "tendermint.spn.campaign.EventCampaignSharesUpdated")
	proto.RegisterType((*EventCampaignTotalSupplyUpdated)(nil), "tendermint.spn.campaign.EventCampaignTotalSupplyUpdated")
	proto.RegisterType((*EventCampaignMainnetInitialized)(nil), "tendermint.spn.campaign.EventCampaignMainnetInitialized")
	proto.RegisterType((*EventMainnetAccountCreated)(nil), "tendermint.spn.campaign.EventMainnetAccountCreated")
	proto.RegisterType((*EventMainnetAccountUpdated)(nil), "tendermint.spn.campaign.EventMainnetAccountUpdated")
	proto.RegisterType((*EventMainnetAccountRemoved)(nil), "tendermint.spn.campaign.EventMainnetAccountRemoved")
	proto.RegisterType((*EventMainnetVestingAccountCreated)(nil), "tendermint.spn.campaign.EventMainnetVestingAccountCreated")
	proto.RegisterType((*EventMainnetVestingAccountUpdated)(nil), "tendermint.spn.campaign.EventMainnetVestingAccountUpdated")
	proto.RegisterType((*EventCampaignAuctionCreated)(nil), "tendermint.spn.campaign.EventCampaignAuctionCreated")
}

func init() { proto.RegisterFile("campaign/events.proto", fileDescriptor_d53837db7ef8e0f4) }

var fileDescriptor_d53837db7ef8e0f4 = []byte{
	// 654 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x56, 0x3d, 0x6f, 0xd3, 0x4e,
	0x1c, 0xce, 0xb5, 0x51, 0xff, 0xff, 0x5c, 0x0b, 0x48, 0x56, 0xa1, 0x6e, 0xa8, 0x9c, 0x60, 0x21,
	0x91, 0x81, 0xda, 0x6a, 0x98, 0x18, 0xf3, 0x82, 0xd4, 0x0c, 0x80, 0xe4, 0xd0, 0x0e, 0xed, 0x80,
	0x2e, 0xf6, 0xe1, 0x9c, 0x6a, 0xdf, 0x59, 0xbe, 0x4b, 0xa0, 0x0c, 0x8c, 0xcc, 0x8c, 0x7c, 0x82,
	0x4a, 0x30, 0xf3, 0x11, 0x18, 0x3a, 0x56, 0xb0, 0x30, 0x05, 0x94, 0x7c, 0x0b, 0x26, 0x64, 0xfb,
	0xf2, 0xe2, 0xa8, 0x55, 0xcd, 0x90, 0x88, 0x29, 0xb9, 0xdf, 0xeb, 0xf3, 0x3c, 0x79, 0xe2, 0x33,
	0xbc, 0x6d, 0x23, 0x3f, 0x40, 0xc4, 0xa5, 0x26, 0xee, 0x63, 0x2a, 0xb8, 0x11, 0x84, 0x4c, 0x30,
	0x65, 0x4b, 0x60, 0xea, 0xe0, 0xd0, 0x27, 0x54, 0x18, 0x3c, 0xa0, 0xc6, 0xb8, 0xaa, 0xb8, 0xe9,
	0x32, 0x97, 0xc5, 0x35, 0x66, 0xf4, 0x2d, 0x29, 0x2f, 0x6a, 0x36, 0xe3, 0x3e, 0xe3, 0x66, 0x07,
	0x71, 0x6c, 0xf6, 0xf7, 0x3a, 0x58, 0xa0, 0x3d, 0xd3, 0x66, 0x84, 0xca, 0xfc, 0x76, 0x92, 0x7f,
	0x99, 0x34, 0x26, 0x07, 0x99, 0xba, 0x33, 0x01, 0xd0, 0xc7, 0x5c, 0x10, 0xea, 0x26, 0x71, 0xfd,
	0x0c, 0xc0, 0xcd, 0x27, 0x11, 0xa4, 0x86, 0xcc, 0x37, 0x42, 0x8c, 0x04, 0x76, 0x14, 0x0d, 0xc2,
	0x71, 0x4b, 0xab, 0xa9, 0x82, 0x32, 0xa8, 0xe4, 0xad, 0x99, 0x88, 0xb2, 0x0f, 0x15, 0x9b, 0xb1,
	0xd0, 0x21, 0x14, 0x09, 0x16, 0xd6, 0x1c, 0x27, 0xc4, 0x9c, 0xab, 0x2b, 0x65, 0x50, 0x29, 0xd4,
	0xd5, 0x6f, 0x5f, 0x76, 0x37, 0xe5, 0x7a, 0x99, 0x69, 0x8b, 0x90, 0x50, 0xd7, 0xba, 0xa4, 0x47,
	0xb9, 0x0f, 0x6f, 0xcc, 0x44, 0x5b, 0x4d, 0x75, 0x35, 0x5e, 0x96, 0x0e, 0xea, 0x07, 0x70, 0x2b,
	0x8d, 0xb3, 0x8b, 0x08, 0xad, 0x39, 0x4e, 0x06, 0xa8, 0x45, 0xf8, 0xbf, 0x87, 0x7a, 0xd4, 0xee,
	0xb6, 0x9a, 0x31, 0xc0, 0xbc, 0x35, 0x39, 0xeb, 0x5f, 0x01, 0x54, 0x53, 0x73, 0x5b, 0xf4, 0x15,
	0x3b, 0x08, 0x9c, 0x25, 0x6b, 0xa0, 0xc3, 0x8d, 0xf1, 0xdc, 0x67, 0xc8, 0xc7, 0xb1, 0x04, 0x05,
	0x2b, 0x15, 0x8b, 0x68, 0xf8, 0x58, 0x20, 0x07, 0x09, 0xa4, 0xe6, 0xcb, 0xa0, 0xb2, 0x61, 0x4d,
	0xce, 0xfa, 0xfb, 0x15, 0x58, 0x4c, 0xd1, 0x68, 0x77, 0x51, 0x88, 0xf9, 0xf2, 0x89, 0xbc, 0x83,
	0xb7, 0x90, 0xe7, 0x31, 0x3b, 0x5a, 0x9b, 0x60, 0x50, 0x57, 0xcb, 0xab, 0x95, 0xf5, 0xea, 0xb6,
	0x21, 0x67, 0x44, 0xe6, 0x35, 0xa4, 0x79, 0x8d, 0x06, 0x23, 0xb4, 0xfe, 0xf8, 0x7c, 0x50, 0xca,
	0xfd, 0x1e, 0x94, 0x1e, 0xb8, 0x44, 0x74, 0x7b, 0x1d, 0xc3, 0x66, 0xbe, 0x34, 0xaf, 0xfc, 0xd8,
	0xe5, 0xce, 0x89, 0x29, 0x4e, 0x03, 0xcc, 0xe3, 0x86, 0xcf, 0x3f, 0x4b, 0x6b, 0xc9, 0x6c, 0x6b,
	0x7e, 0x99, 0x7e, 0xb6, 0x02, 0x4b, 0x29, 0x21, 0x5e, 0x30, 0x81, 0xbc, 0x76, 0x2f, 0x08, 0xbc,
	0xd3, 0xe5, 0xab, 0xf1, 0x11, 0xc0, 0x75, 0x31, 0x05, 0x70, 0xbd, 0x14, 0xc7, 0x7f, 0x2f, 0x45,
	0x25, 0x63, 0x29, 0xb7, 0x66, 0xa1, 0xe8, 0x9f, 0xc0, 0x9c, 0x50, 0x4f, 0x11, 0xa1, 0x14, 0x8b,
	0x16, 0x25, 0x82, 0x20, 0x8f, 0xbc, 0x5d, 0xaa, 0x50, 0x3b, 0xb0, 0xe0, 0xcb, 0xfd, 0xe3, 0xff,
	0xff, 0x34, 0xa0, 0x0f, 0x80, 0x74, 0xb7, 0xc4, 0x58, 0xb3, 0x6d, 0xd6, 0xa3, 0x22, 0xeb, 0xa3,
	0xaa, 0x0a, 0xff, 0x43, 0x19, 0xb1, 0x8d, 0x0b, 0x15, 0x0f, 0xae, 0xf1, 0xc5, 0xdb, 0x57, 0xee,
	0xb8, 0x8a, 0x60, 0x56, 0xc3, 0xfe, 0xfb, 0x04, 0x83, 0x4b, 0xf9, 0x59, 0xd8, 0x67, 0xfd, 0xc5,
	0xf0, 0xd3, 0xbf, 0x03, 0x78, 0x6f, 0x76, 0xe5, 0x61, 0x72, 0xed, 0x2d, 0xc1, 0x3a, 0x47, 0xf0,
	0xa6, 0xbc, 0x63, 0x9f, 0x07, 0x82, 0x30, 0xca, 0x63, 0x43, 0xaf, 0x57, 0x1f, 0x1a, 0x57, 0xdc,
	0xf6, 0x46, 0x2c, 0xd6, 0x61, 0xaa, 0xa7, 0x9e, 0x8f, 0x44, 0xb7, 0xe6, 0x26, 0x5d, 0xc3, 0x6a,
	0x91, 0x7e, 0x59, 0x24, 0xab, 0x63, 0x78, 0x37, 0xf5, 0x28, 0xaa, 0xf5, 0xec, 0x28, 0x91, 0xf5,
	0x47, 0xda, 0x81, 0x05, 0x94, 0x74, 0x4c, 0x2e, 0xf8, 0x69, 0xa0, 0xbe, 0x7f, 0x3e, 0xd4, 0xc0,
	0xc5, 0x50, 0x03, 0xbf, 0x86, 0x1a, 0xf8, 0x30, 0xd2, 0x72, 0x17, 0x23, 0x2d, 0xf7, 0x63, 0xa4,
	0xe5, 0x8e, 0x8c, 0x19, 0x3f, 0xf3, 0x00, 0x7b, 0x1e, 0xef, 0xa2, 0x00, 0x9b, 0x14, 0x8b, 0xd7,
	0x2c, 0x3c, 0x31, 0xdf, 0x98, 0x93, 0x77, 0xa6, 0xd8, 0xdb, 0x9d, 0xb5, 0xf8, 0x95, 0xe9, 0xd1,
	0x9f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xce, 0x9d, 0x84, 0x69, 0xcd, 0x09, 0x00, 0x00,
}

func (m *EventCampaignCreated) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventCampaignCreated) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventCampaignCreated) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CoordinatorID != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.CoordinatorID))
		i--
		dAtA[i] = 0x18
	}
	if len(m.CoordinatorAddress) > 0 {
		i -= len(m.CoordinatorAddress)
		copy(dAtA[i:], m.CoordinatorAddress)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.CoordinatorAddress)))
		i--
		dAtA[i] = 0x12
	}
	if m.CampaignID != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.CampaignID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *EventCampaignChainAdded) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventCampaignChainAdded) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventCampaignChainAdded) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.LaunchID != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.LaunchID))
		i--
		dAtA[i] = 0x10
	}
	if m.CampaignID != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.CampaignID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *EventCampaignInfoUpdated) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventCampaignInfoUpdated) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventCampaignInfoUpdated) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Metadata) > 0 {
		i -= len(m.Metadata)
		copy(dAtA[i:], m.Metadata)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Metadata)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.CampaignName) > 0 {
		i -= len(m.CampaignName)
		copy(dAtA[i:], m.CampaignName)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.CampaignName)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.CoordinatorAddress) > 0 {
		i -= len(m.CoordinatorAddress)
		copy(dAtA[i:], m.CoordinatorAddress)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.CoordinatorAddress)))
		i--
		dAtA[i] = 0x12
	}
	if m.CampaignID != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.CampaignID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *EventCampaignSharesUpdated) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventCampaignSharesUpdated) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventCampaignSharesUpdated) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AllocatedShares) > 0 {
		for iNdEx := len(m.AllocatedShares) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.AllocatedShares[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintEvents(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.CoordinatorAddress) > 0 {
		i -= len(m.CoordinatorAddress)
		copy(dAtA[i:], m.CoordinatorAddress)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.CoordinatorAddress)))
		i--
		dAtA[i] = 0x12
	}
	if m.CampaignID != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.CampaignID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *EventCampaignTotalSupplyUpdated) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventCampaignTotalSupplyUpdated) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventCampaignTotalSupplyUpdated) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TotalSupply) > 0 {
		for iNdEx := len(m.TotalSupply) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TotalSupply[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintEvents(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.CoordinatorAddress) > 0 {
		i -= len(m.CoordinatorAddress)
		copy(dAtA[i:], m.CoordinatorAddress)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.CoordinatorAddress)))
		i--
		dAtA[i] = 0x12
	}
	if m.CampaignID != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.CampaignID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *EventCampaignMainnetInitialized) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventCampaignMainnetInitialized) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventCampaignMainnetInitialized) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MainnetID != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.MainnetID))
		i--
		dAtA[i] = 0x18
	}
	if len(m.CoordinatorAddress) > 0 {
		i -= len(m.CoordinatorAddress)
		copy(dAtA[i:], m.CoordinatorAddress)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.CoordinatorAddress)))
		i--
		dAtA[i] = 0x12
	}
	if m.CampaignID != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.CampaignID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *EventMainnetAccountCreated) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventMainnetAccountCreated) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventMainnetAccountCreated) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Shares) > 0 {
		for iNdEx := len(m.Shares) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Shares[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintEvents(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x12
	}
	if m.CampaignID != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.CampaignID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *EventMainnetAccountUpdated) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventMainnetAccountUpdated) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventMainnetAccountUpdated) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Shares) > 0 {
		for iNdEx := len(m.Shares) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Shares[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintEvents(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x12
	}
	if m.CampaignID != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.CampaignID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *EventMainnetAccountRemoved) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventMainnetAccountRemoved) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventMainnetAccountRemoved) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x12
	}
	if m.CampaignID != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.CampaignID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *EventMainnetVestingAccountCreated) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventMainnetVestingAccountCreated) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventMainnetVestingAccountCreated) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.VestingOptions.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintEvents(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x12
	}
	if m.CampaignID != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.CampaignID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *EventMainnetVestingAccountUpdated) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventMainnetVestingAccountUpdated) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventMainnetVestingAccountUpdated) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.VestingOptions.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintEvents(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x12
	}
	if m.CampaignID != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.CampaignID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *EventCampaignAuctionCreated) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventCampaignAuctionCreated) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventCampaignAuctionCreated) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AuctionID != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.AuctionID))
		i--
		dAtA[i] = 0x10
	}
	if m.CampaignID != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.CampaignID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintEvents(dAtA []byte, offset int, v uint64) int {
	offset -= sovEvents(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *EventCampaignCreated) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CampaignID != 0 {
		n += 1 + sovEvents(uint64(m.CampaignID))
	}
	l = len(m.CoordinatorAddress)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.CoordinatorID != 0 {
		n += 1 + sovEvents(uint64(m.CoordinatorID))
	}
	return n
}

func (m *EventCampaignChainAdded) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CampaignID != 0 {
		n += 1 + sovEvents(uint64(m.CampaignID))
	}
	if m.LaunchID != 0 {
		n += 1 + sovEvents(uint64(m.LaunchID))
	}
	return n
}

func (m *EventCampaignInfoUpdated) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CampaignID != 0 {
		n += 1 + sovEvents(uint64(m.CampaignID))
	}
	l = len(m.CoordinatorAddress)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.CampaignName)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.Metadata)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func (m *EventCampaignSharesUpdated) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CampaignID != 0 {
		n += 1 + sovEvents(uint64(m.CampaignID))
	}
	l = len(m.CoordinatorAddress)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if len(m.AllocatedShares) > 0 {
		for _, e := range m.AllocatedShares {
			l = e.Size()
			n += 1 + l + sovEvents(uint64(l))
		}
	}
	return n
}

func (m *EventCampaignTotalSupplyUpdated) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CampaignID != 0 {
		n += 1 + sovEvents(uint64(m.CampaignID))
	}
	l = len(m.CoordinatorAddress)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if len(m.TotalSupply) > 0 {
		for _, e := range m.TotalSupply {
			l = e.Size()
			n += 1 + l + sovEvents(uint64(l))
		}
	}
	return n
}

func (m *EventCampaignMainnetInitialized) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CampaignID != 0 {
		n += 1 + sovEvents(uint64(m.CampaignID))
	}
	l = len(m.CoordinatorAddress)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.MainnetID != 0 {
		n += 1 + sovEvents(uint64(m.MainnetID))
	}
	return n
}

func (m *EventMainnetAccountCreated) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CampaignID != 0 {
		n += 1 + sovEvents(uint64(m.CampaignID))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if len(m.Shares) > 0 {
		for _, e := range m.Shares {
			l = e.Size()
			n += 1 + l + sovEvents(uint64(l))
		}
	}
	return n
}

func (m *EventMainnetAccountUpdated) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CampaignID != 0 {
		n += 1 + sovEvents(uint64(m.CampaignID))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if len(m.Shares) > 0 {
		for _, e := range m.Shares {
			l = e.Size()
			n += 1 + l + sovEvents(uint64(l))
		}
	}
	return n
}

func (m *EventMainnetAccountRemoved) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CampaignID != 0 {
		n += 1 + sovEvents(uint64(m.CampaignID))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func (m *EventMainnetVestingAccountCreated) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CampaignID != 0 {
		n += 1 + sovEvents(uint64(m.CampaignID))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = m.VestingOptions.Size()
	n += 1 + l + sovEvents(uint64(l))
	return n
}

func (m *EventMainnetVestingAccountUpdated) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CampaignID != 0 {
		n += 1 + sovEvents(uint64(m.CampaignID))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = m.VestingOptions.Size()
	n += 1 + l + sovEvents(uint64(l))
	return n
}

func (m *EventCampaignAuctionCreated) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CampaignID != 0 {
		n += 1 + sovEvents(uint64(m.CampaignID))
	}
	if m.AuctionID != 0 {
		n += 1 + sovEvents(uint64(m.AuctionID))
	}
	return n
}

func sovEvents(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozEvents(x uint64) (n int) {
	return sovEvents(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *EventCampaignCreated) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventCampaignCreated: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventCampaignCreated: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CampaignID", wireType)
			}
			m.CampaignID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CampaignID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoordinatorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CoordinatorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoordinatorID", wireType)
			}
			m.CoordinatorID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CoordinatorID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventCampaignChainAdded) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventCampaignChainAdded: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventCampaignChainAdded: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CampaignID", wireType)
			}
			m.CampaignID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CampaignID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LaunchID", wireType)
			}
			m.LaunchID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LaunchID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventCampaignInfoUpdated) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventCampaignInfoUpdated: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventCampaignInfoUpdated: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CampaignID", wireType)
			}
			m.CampaignID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CampaignID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoordinatorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CoordinatorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CampaignName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CampaignName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Metadata = append(m.Metadata[:0], dAtA[iNdEx:postIndex]...)
			if m.Metadata == nil {
				m.Metadata = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventCampaignSharesUpdated) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventCampaignSharesUpdated: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventCampaignSharesUpdated: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CampaignID", wireType)
			}
			m.CampaignID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CampaignID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoordinatorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CoordinatorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllocatedShares", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AllocatedShares = append(m.AllocatedShares, github_com_cosmos_cosmos_sdk_types.Coin{})
			if err := m.AllocatedShares[len(m.AllocatedShares)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventCampaignTotalSupplyUpdated) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventCampaignTotalSupplyUpdated: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventCampaignTotalSupplyUpdated: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CampaignID", wireType)
			}
			m.CampaignID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CampaignID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoordinatorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CoordinatorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalSupply", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TotalSupply = append(m.TotalSupply, github_com_cosmos_cosmos_sdk_types.Coin{})
			if err := m.TotalSupply[len(m.TotalSupply)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventCampaignMainnetInitialized) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventCampaignMainnetInitialized: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventCampaignMainnetInitialized: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CampaignID", wireType)
			}
			m.CampaignID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CampaignID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoordinatorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CoordinatorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MainnetID", wireType)
			}
			m.MainnetID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MainnetID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventMainnetAccountCreated) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventMainnetAccountCreated: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventMainnetAccountCreated: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CampaignID", wireType)
			}
			m.CampaignID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CampaignID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Shares", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Shares = append(m.Shares, github_com_cosmos_cosmos_sdk_types.Coin{})
			if err := m.Shares[len(m.Shares)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventMainnetAccountUpdated) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventMainnetAccountUpdated: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventMainnetAccountUpdated: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CampaignID", wireType)
			}
			m.CampaignID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CampaignID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Shares", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Shares = append(m.Shares, github_com_cosmos_cosmos_sdk_types.Coin{})
			if err := m.Shares[len(m.Shares)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventMainnetAccountRemoved) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventMainnetAccountRemoved: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventMainnetAccountRemoved: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CampaignID", wireType)
			}
			m.CampaignID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CampaignID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventMainnetVestingAccountCreated) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventMainnetVestingAccountCreated: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventMainnetVestingAccountCreated: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CampaignID", wireType)
			}
			m.CampaignID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CampaignID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VestingOptions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.VestingOptions.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventMainnetVestingAccountUpdated) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventMainnetVestingAccountUpdated: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventMainnetVestingAccountUpdated: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CampaignID", wireType)
			}
			m.CampaignID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CampaignID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VestingOptions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.VestingOptions.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventCampaignAuctionCreated) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventCampaignAuctionCreated: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventCampaignAuctionCreated: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CampaignID", wireType)
			}
			m.CampaignID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CampaignID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuctionID", wireType)
			}
			m.AuctionID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AuctionID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipEvents(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthEvents
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupEvents
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthEvents
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthEvents        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowEvents          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupEvents = fmt.Errorf("proto: unexpected end of group")
)
